# File generated by confd

class { 'firewall': }

resources { 'firewall':
    purge   => true,
}

# Default chains to accept
# All trafic destined for this host, filtered by security groups first
firewallchain { 'INPUT:filter:IPv4':
    ensure  => 'present',
    policy  => 'accept',
}

# All trafic out from this host, filtered by security groups first
firewallchain { 'OUTPUT:filter:IPv4':
    ensure  => 'present',
    policy  => 'accept',
}

# Forwarding traffic is dropped by default (rejected nicer lower)
firewallchain { 'FORWARD:filter:IPv4':
    ensure  => 'present',
    policy  => 'drop',
}

# Nat iptable for traffic leaving on our public interface
firewall { "000 snat for network":
  chain    => 'POSTROUTING',
  jump     => 'MASQUERADE',
  proto    => 'all',
  outiface => 'eth0',
  table    => 'nat',
}

# Allow all traffic thatis part of already known flows
firewall { '002 accept established flows':
  proto   => 'all',
  chain   => 'FORWARD',
  state   => [ 'ESTABLISHED','RELATED' ],
  action  => 'accept',
}

# Allow all ICMP out
firewall { '004 ICMP':
  chain     => 'FORWARD',
  proto     => 'icmp',
  state     => [ 'NEW' ],
  outiface  => 'eth0',
  iniface   => 'eth1',
  action    => 'accept',
}

# Allow all NTP out
firewall { '005 NTP':
  chain     => 'FORWARD',
  proto     => 'udp',
  dport     => 'ntp',
  state     => [ 'NEW' ],
  outiface  => 'eth0',
  iniface   => 'eth1',
  action    => 'accept',
}

{{ if exists "/config/IptablesAllowTCP" }}{{ range jsonArray (getv "/config/IptablesAllowTCP") }}
firewall { '100 IptablesAllowTCP {{.}}':
  chain     => 'FORWARD',
  proto     => 'tcp',
  dport     => '{{.}}',
  state     => [ 'NEW' ],
  outiface  => 'eth0',
  iniface   => 'eth1',
  action    => 'accept',
}
{{end}} {{end}}

{{ if exists "/config/IptablesAllowUDP" }}{{ range jsonArray (getv "/config/IptablesAllowUDP") }}
firewall { '100 IptablesAllowUDP {{.}}':
  chain     => 'FORWARD',
  proto     => 'udp',
  dport     => '{{.}}',
  state     => [ 'NEW' ],
  outiface  => 'eth0',
  iniface   => 'eth1',
  action    => 'accept',
}
{{end}} {{end}}

# Log the rest
firewall { '998 FORWARD logging':
    chain      => 'FORWARD',
    jump       => 'LOG',
    log_level  => '6',
    log_prefix => '[fwdeny-forward] ',
    proto      => 'all',
}

# And drop it
firewall { "999 deny forward":
    chain   => 'FORWARD',
    proto   => 'all',
    action  => 'reject',
}
